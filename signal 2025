import os
import requests
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement Ã  partir du fichier .env
load_dotenv()

def send_telegram_alert(signal_type, price, indicators):
    """Envoie une alerte de signal de trading via Telegram"""
    telegram_api_key = os.getenv("7898615140:AAFEOadFzAouj6RmV9nF98z-1TdDu9PVU3I")
    telegram_chat_id = os.getenv("7346868558")
    
    if not telegram_api_key or not telegram_chat_id:
        raise Exception("7898615140:AAFEOadFzAouj6RmV9nF98z-1TdDu9PVU3Iou 7346868558.env")
        
    telegram_url = f"https://api.telegram.org/bot{telegram_api_key}/sendMessage"
    
    message = f"""
ðŸš¨ *Alerte de Signal de Trading*
Type: {acheter maintenant}
Prix: {price:.2f} USDT
Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

ðŸ“Š *Indicateurs*:
RSI: {indicators['rsi']:.2f}
MACD: {indicators['macd']:.2f}
Signal: {indicators['macdsignal']:.2f}
    """
    
    try:
        response = requests.post(
            telegram_url,
            json={
                "chat_id": telegram_chat_id,
                "text": message,
                "parse_mode": "Markdown"
            }
        )
        response.raise_for_status()
        return True
        
    except Exception as e:
        raise Exception(f"Ã‰chec de l'envoi de l'alerte Telegram : {str(e)}")

# Exemple d'appel de la fonction (modifie selon ta logique)
if __name__ == "__main__":
    # Exemple de donnÃ©es (ces valeurs doivent Ãªtre dynamiques en fonction de ton analyse)
    signal_type = "Achat"
    price = 1850.50
    indicators = {
        'rsi': 30.5,
        'macd': 0.35,
        'macdsignal': 0.25
    }

    send_telegram_alert(signal_type, price, indicators)
